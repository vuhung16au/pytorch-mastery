#!/usr/bin/env python3
"""
Add RNN model architecture and training cells to the notebook
"""

import json

def add_rnn_model_cells():
    """Add RNN model architecture and training implementation."""
    
    # Load existing notebook
    with open("examples/pytorch-nlp/classify-names-character-level-RNN.ipynb", "r") as f:
        notebook = json.load(f)
    
    # Cell 9: Dataset Class
    notebook["cells"].append({
        "cell_type": "markdown",
        "metadata": {},
        "source": [
            "## üóÉÔ∏è PyTorch Dataset Implementation\n",
            "\n",
            "We'll create a custom PyTorch Dataset class that handles our character-level data efficiently. This follows PyTorch best practices and enables easy integration with DataLoader for batching."
        ]
    })
    
    notebook["cells"].append({
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "class AustralianNamesDataset(Dataset):\n",
            "    \"\"\"\n",
            "    PyTorch Dataset for Australian names and locations with character-level processing.\n",
            "    \n",
            "    TensorFlow equivalent:\n",
            "        tf.data.Dataset.from_tensor_slices((texts, labels))\n",
            "    \n",
            "    This dataset handles:\n",
            "    - Character-level tokenization\n",
            "    - Variable sequence lengths\n",
            "    - Label encoding for classification\n",
            "    \"\"\"\n",
            "    \n",
            "    def __init__(self, text_data, char_processor, transform=None):\n",
            "        \"\"\"\n",
            "        Initialize the dataset.\n",
            "        \n",
            "        Args:\n",
            "            text_data: List of (text, label) tuples\n",
            "            char_processor: CharacterProcessor instance\n",
            "            transform: Optional data transformations\n",
            "        \"\"\"\n",
            "        self.data = text_data\n",
            "        self.char_processor = char_processor\n",
            "        self.transform = transform\n",
            "        \n",
            "        # Extract unique labels and create label encoder\n",
            "        unique_labels = list(set([label for _, label in text_data]))\n",
            "        self.label_encoder = LabelEncoder()\n",
            "        self.label_encoder.fit(unique_labels)\n",
            "        \n",
            "        self.num_classes = len(unique_labels)\n",
            "        self.label_names = self.label_encoder.classes_\n",
            "        \n",
            "        print(f\"üìä Dataset initialized:\")\n",
            "        print(f\"   Samples: {len(self.data)}\")\n",
            "        print(f\"   Classes: {self.num_classes}\")\n",
            "        print(f\"   Labels: {list(self.label_names)}\")\n",
            "    \n",
            "    def __len__(self):\n",
            "        return len(self.data)\n",
            "    \n",
            "    def __getitem__(self, idx):\n",
            "        text, label = self.data[idx]\n",
            "        \n",
            "        # Convert text to character tensor\n",
            "        char_tensor = self.char_processor.text_to_tensor(text)\n",
            "        \n",
            "        # Encode label\n",
            "        label_encoded = torch.tensor(self.label_encoder.transform([label])[0], dtype=torch.long)\n",
            "        \n",
            "        if self.transform:\n",
            "            char_tensor = self.transform(char_tensor)\n",
            "            \n",
            "        return char_tensor, label_encoded\n",
            "    \n",
            "    def get_label_name(self, encoded_label):\n",
            "        \"\"\"Convert encoded label back to name.\"\"\"\n",
            "        return self.label_encoder.inverse_transform([encoded_label])[0]\n",
            "\n",
            "def collate_sequences(batch):\n",
            "    \"\"\"\n",
            "    Custom collate function for variable-length sequences.\n",
            "    \n",
            "    PyTorch DataLoader requires fixed-size tensors, so we pad sequences\n",
            "    to the maximum length in each batch.\n",
            "    \n",
            "    TensorFlow equivalent:\n",
            "        tf.keras.preprocessing.sequence.pad_sequences()\n",
            "    \"\"\"\n",
            "    sequences, labels = zip(*batch)\n",
            "    \n",
            "    # Find maximum sequence length in batch\n",
            "    max_length = max(len(seq) for seq in sequences)\n",
            "    \n",
            "    # Pad sequences to max length\n",
            "    padded_sequences = []\n",
            "    sequence_lengths = []\n",
            "    \n",
            "    for seq in sequences:\n",
            "        seq_len = len(seq)\n",
            "        sequence_lengths.append(seq_len)\n",
            "        \n",
            "        # Pad with zeros (assuming 0 is a valid padding index)\n",
            "        if seq_len < max_length:\n",
            "            padding = torch.zeros(max_length - seq_len, dtype=torch.long)\n",
            "            padded_seq = torch.cat([seq, padding])\n",
            "        else:\n",
            "            padded_seq = seq\n",
            "            \n",
            "        padded_sequences.append(padded_seq)\n",
            "    \n",
            "    # Stack into batch tensors\n",
            "    sequences_tensor = torch.stack(padded_sequences)\n",
            "    labels_tensor = torch.stack(labels)\n",
            "    lengths_tensor = torch.tensor(sequence_lengths, dtype=torch.long)\n",
            "    \n",
            "    return sequences_tensor, labels_tensor, lengths_tensor\n",
            "\n",
            "# Create datasets for names and locations separately\n",
            "names_dataset = AustralianNamesDataset(names_data, char_processor)\n",
            "locations_dataset = AustralianNamesDataset(locations_data, char_processor)\n",
            "\n",
            "# Split names dataset for training/validation\n",
            "train_names, val_names = train_test_split(names_data, test_size=0.2, random_state=42, \n",
            "                                        stratify=[label for _, label in names_data])\n",
            "\n",
            "train_names_dataset = AustralianNamesDataset(train_names, char_processor)\n",
            "val_names_dataset = AustralianNamesDataset(val_names, char_processor)\n",
            "\n",
            "# Create data loaders\n",
            "batch_size = 32 if DEVICE.type == 'cpu' else 64\n",
            "\n",
            "train_loader = DataLoader(\n",
            "    train_names_dataset, \n",
            "    batch_size=batch_size, \n",
            "    shuffle=True,\n",
            "    collate_fn=collate_sequences,\n",
            "    pin_memory=torch.cuda.is_available()\n",
            ")\n",
            "\n",
            "val_loader = DataLoader(\n",
            "    val_names_dataset, \n",
            "    batch_size=batch_size, \n",
            "    shuffle=False,\n",
            "    collate_fn=collate_sequences,\n",
            "    pin_memory=torch.cuda.is_available()\n",
            ")\n",
            "\n",
            "print(f\"\\nüì¶ Data Loaders Created:\")\n",
            "print(f\"   Training batches: {len(train_loader)}\")\n",
            "print(f\"   Validation batches: {len(val_loader)}\")\n",
            "print(f\"   Batch size: {batch_size}\")\n",
            "\n",
            "# Test data loading\n",
            "sample_batch = next(iter(train_loader))\n",
            "sequences, labels, lengths = sample_batch\n",
            "print(f\"\\nüß™ Sample batch shapes:\")\n",
            "print(f\"   Sequences: {sequences.shape}\")\n",
            "print(f\"   Labels: {labels.shape}\")\n",
            "print(f\"   Lengths: {lengths.shape}\")\n",
            "print(f\"   Sample sequence length range: {lengths.min().item()}-{lengths.max().item()}\")"
        ]
    })
    
    # Cell 11: RNN Model Architecture
    notebook["cells"].append({
        "cell_type": "markdown",
        "metadata": {},
        "source": [
            "## üß† Character-Level RNN Architecture\n",
            "\n",
            "We'll implement a character-level RNN that processes names one character at a time. The model architecture includes:\n",
            "\n",
            "1. **Character Embedding** - Convert one-hot characters to dense vectors\n",
            "2. **RNN Layer** - Process character sequences (LSTM/GRU variants)\n",
            "3. **Classification Head** - Map final hidden state to class predictions\n",
            "4. **Attention Mechanism** - Optional attention over character sequence"
        ]
    })
    
    notebook["cells"].append({
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "class CharacterLevelRNN(nn.Module):\n",
            "    \"\"\"\n",
            "    Character-level RNN for Australian name and location classification.\n",
            "    \n",
            "    TensorFlow equivalent:\n",
            "        model = tf.keras.Sequential([\n",
            "            tf.keras.layers.Embedding(vocab_size, embed_dim),\n",
            "            tf.keras.layers.LSTM(hidden_dim, return_sequences=False),\n",
            "            tf.keras.layers.Dense(num_classes, activation='softmax')\n",
            "        ])\n",
            "    \n",
            "    Key differences from TensorFlow:\n",
            "    - Explicit forward pass definition\n",
            "    - Manual hidden state initialization\n",
            "    - Device management with .to(device)\n",
            "    \"\"\"\n",
            "    \n",
            "    def __init__(self, vocab_size, embed_dim, hidden_dim, num_classes, \n",
            "                 rnn_type='LSTM', num_layers=1, dropout=0.2, bidirectional=False):\n",
            "        \"\"\"\n",
            "        Initialize the character-level RNN model.\n",
            "        \n",
            "        Args:\n",
            "            vocab_size: Size of character vocabulary\n",
            "            embed_dim: Embedding dimension\n",
            "            hidden_dim: Hidden state dimension\n",
            "            num_classes: Number of classification classes\n",
            "            rnn_type: Type of RNN ('RNN', 'LSTM', 'GRU')\n",
            "            num_layers: Number of RNN layers\n",
            "            dropout: Dropout rate\n",
            "            bidirectional: Whether to use bidirectional RNN\n",
            "        \"\"\"\n",
            "        super(CharacterLevelRNN, self).__init__()\n",
            "        \n",
            "        self.vocab_size = vocab_size\n",
            "        self.embed_dim = embed_dim\n",
            "        self.hidden_dim = hidden_dim\n",
            "        self.num_classes = num_classes\n",
            "        self.rnn_type = rnn_type\n",
            "        self.num_layers = num_layers\n",
            "        self.bidirectional = bidirectional\n",
            "        \n",
            "        # Embedding layer - maps character indices to dense vectors\n",
            "        self.embedding = nn.Embedding(vocab_size, embed_dim, padding_idx=0)\n",
            "        \n",
            "        # RNN layer - choose between RNN, LSTM, and GRU\n",
            "        if rnn_type == 'LSTM':\n",
            "            self.rnn = nn.LSTM(\n",
            "                embed_dim, hidden_dim, num_layers,\n",
            "                batch_first=True, dropout=dropout if num_layers > 1 else 0,\n",
            "                bidirectional=bidirectional\n",
            "            )\n",
            "        elif rnn_type == 'GRU':\n",
            "            self.rnn = nn.GRU(\n",
            "                embed_dim, hidden_dim, num_layers,\n",
            "                batch_first=True, dropout=dropout if num_layers > 1 else 0,\n",
            "                bidirectional=bidirectional\n",
            "            )\n",
            "        else:  # Vanilla RNN\n",
            "            self.rnn = nn.RNN(\n",
            "                embed_dim, hidden_dim, num_layers,\n",
            "                batch_first=True, dropout=dropout if num_layers > 1 else 0,\n",
            "                bidirectional=bidirectional, nonlinearity='relu'\n",
            "            )\n",
            "        \n",
            "        # Calculate final hidden dimension\n",
            "        final_hidden_dim = hidden_dim * 2 if bidirectional else hidden_dim\n",
            "        \n",
            "        # Dropout layer\n",
            "        self.dropout = nn.Dropout(dropout)\n",
            "        \n",
            "        # Classification head\n",
            "        self.classifier = nn.Sequential(\n",
            "            nn.Linear(final_hidden_dim, final_hidden_dim // 2),\n",
            "            nn.ReLU(),\n",
            "            nn.Dropout(dropout),\n",
            "            nn.Linear(final_hidden_dim // 2, num_classes)\n",
            "        )\n",
            "        \n",
            "        # Initialize weights\n",
            "        self._init_weights()\n",
            "    \n",
            "    def _init_weights(self):\n",
            "        \"\"\"Initialize model weights using Xavier/Glorot initialization.\"\"\"\n",
            "        for name, param in self.named_parameters():\n",
            "            if 'weight' in name:\n",
            "                if param.dim() > 1:\n",
            "                    nn.init.xavier_uniform_(param)\n",
            "            elif 'bias' in name:\n",
            "                nn.init.constant_(param, 0)\n",
            "    \n",
            "    def forward(self, sequences, lengths=None):\n",
            "        \"\"\"\n",
            "        Forward pass through the character-level RNN.\n",
            "        \n",
            "        Args:\n",
            "            sequences: Input character sequences [batch_size, seq_len]\n",
            "            lengths: Actual sequence lengths [batch_size]\n",
            "            \n",
            "        Returns:\n",
            "            torch.Tensor: Class logits [batch_size, num_classes]\n",
            "        \"\"\"\n",
            "        batch_size, seq_len = sequences.size()\n",
            "        \n",
            "        # Embedding lookup\n",
            "        embedded = self.embedding(sequences)  # [batch_size, seq_len, embed_dim]\n",
            "        \n",
            "        # Apply dropout to embeddings\n",
            "        embedded = self.dropout(embedded)\n",
            "        \n",
            "        # Pack sequences for efficient RNN processing (handles variable lengths)\n",
            "        if lengths is not None:\n",
            "            # Sort by length (required for packing)\n",
            "            sorted_lengths, sorted_idx = torch.sort(lengths, descending=True)\n",
            "            sorted_embedded = embedded[sorted_idx]\n",
            "            \n",
            "            # Pack the sequences\n",
            "            packed_embedded = nn.utils.rnn.pack_padded_sequence(\n",
            "                sorted_embedded, sorted_lengths.cpu(), batch_first=True\n",
            "            )\n",
            "            \n",
            "            # RNN forward pass\n",
            "            packed_output, hidden = self.rnn(packed_embedded)\n",
            "            \n",
            "            # Unpack the output (not needed for classification, but shown for completeness)\n",
            "            # output, _ = nn.utils.rnn.pad_packed_sequence(packed_output, batch_first=True)\n",
            "            \n",
            "            # Restore original order\n",
            "            _, unsorted_idx = torch.sort(sorted_idx)\n",
            "            \n",
            "        else:\n",
            "            # Simple forward pass without packing\n",
            "            output, hidden = self.rnn(embedded)\n",
            "            unsorted_idx = None\n",
            "        \n",
            "        # Extract final hidden state\n",
            "        if self.rnn_type == 'LSTM':\n",
            "            # For LSTM, hidden is (h_n, c_n), we want h_n\n",
            "            final_hidden = hidden[0]  # [num_layers * num_directions, batch, hidden_dim]\n",
            "        else:\n",
            "            # For RNN and GRU\n",
            "            final_hidden = hidden  # [num_layers * num_directions, batch, hidden_dim]\n",
            "        \n",
            "        # Take the last layer's hidden state\n",
            "        if self.bidirectional:\n",
            "            # Concatenate forward and backward hidden states\n",
            "            final_hidden = torch.cat((final_hidden[-2], final_hidden[-1]), dim=1)\n",
            "        else:\n",
            "            final_hidden = final_hidden[-1]  # [batch, hidden_dim]\n",
            "        \n",
            "        # Restore original order if we sorted for packing\n",
            "        if unsorted_idx is not None:\n",
            "            final_hidden = final_hidden[unsorted_idx]\n",
            "        \n",
            "        # Classification\n",
            "        logits = self.classifier(final_hidden)  # [batch_size, num_classes]\n",
            "        \n",
            "        return logits\n",
            "    \n",
            "    def predict(self, text, char_processor, device=None):\n",
            "        \"\"\"\n",
            "        Predict class for a single text input.\n",
            "        \n",
            "        Args:\n",
            "            text: Input text string\n",
            "            char_processor: CharacterProcessor instance\n",
            "            device: PyTorch device\n",
            "            \n",
            "        Returns:\n",
            "            tuple: (predicted_class_idx, confidence_scores)\n",
            "        \"\"\"\n",
            "        if device is None:\n",
            "            device = next(self.parameters()).device\n",
            "            \n",
            "        self.eval()\n",
            "        with torch.no_grad():\n",
            "            # Convert text to tensor\n",
            "            char_tensor = char_processor.text_to_tensor(text).unsqueeze(0).to(device)\n",
            "            length_tensor = torch.tensor([len(text)], dtype=torch.long).to(device)\n",
            "            \n",
            "            # Forward pass\n",
            "            logits = self.forward(char_tensor, length_tensor)\n",
            "            probabilities = F.softmax(logits, dim=1)\n",
            "            \n",
            "            predicted_class = torch.argmax(probabilities, dim=1).item()\n",
            "            confidence = probabilities[0].cpu().numpy()\n",
            "            \n",
            "        return predicted_class, confidence\n",
            "\n",
            "# Model configuration\n",
            "model_config = {\n",
            "    'vocab_size': char_processor.n_letters,\n",
            "    'embed_dim': 64,\n",
            "    'hidden_dim': 128,\n",
            "    'num_classes': train_names_dataset.num_classes,\n",
            "    'rnn_type': 'LSTM',  # Can be 'RNN', 'LSTM', or 'GRU'\n",
            "    'num_layers': 2,\n",
            "    'dropout': 0.3,\n",
            "    'bidirectional': True\n",
            "}\n",
            "\n",
            "# Create model and move to device\n",
            "model = CharacterLevelRNN(**model_config).to(DEVICE)\n",
            "\n",
            "print(f\"üß† Character-Level RNN Model Created\")\n",
            "print(\"=\" * 45)\n",
            "print(f\"   Architecture: {model_config['rnn_type']}\")\n",
            "print(f\"   Vocabulary size: {model_config['vocab_size']}\")\n",
            "print(f\"   Embedding dimension: {model_config['embed_dim']}\")\n",
            "print(f\"   Hidden dimension: {model_config['hidden_dim']}\")\n",
            "print(f\"   Number of classes: {model_config['num_classes']}\")\n",
            "print(f\"   Layers: {model_config['num_layers']}\")\n",
            "print(f\"   Bidirectional: {model_config['bidirectional']}\")\n",
            "print(f\"   Device: {DEVICE}\")\n",
            "\n",
            "# Count parameters\n",
            "total_params = sum(p.numel() for p in model.parameters())\n",
            "trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
            "\n",
            "print(f\"\\nüìä Model Parameters:\")\n",
            "print(f\"   Total parameters: {total_params:,}\")\n",
            "print(f\"   Trainable parameters: {trainable_params:,}\")\n",
            "\n",
            "# Test model with sample input\n",
            "sample_sequences, sample_labels, sample_lengths = next(iter(train_loader))\n",
            "sample_sequences = sample_sequences.to(DEVICE)\n",
            "sample_lengths = sample_lengths.to(DEVICE)\n",
            "\n",
            "with torch.no_grad():\n",
            "    sample_output = model(sample_sequences, sample_lengths)\n",
            "    print(f\"\\nüß™ Sample model output:\")\n",
            "    print(f\"   Input shape: {sample_sequences.shape}\")\n",
            "    print(f\"   Output shape: {sample_output.shape}\")\n",
            "    print(f\"   Output range: [{sample_output.min().item():.3f}, {sample_output.max().item():.3f}]\")\n",
            "\n",
            "print(\"\\n‚úÖ Character-level RNN model ready for training!\")"
        ]
    })
    
    # Save the updated notebook
    with open("examples/pytorch-nlp/classify-names-character-level-RNN.ipynb", "w") as f:
        json.dump(notebook, f, indent=2)
    
    print(f"‚úÖ Added RNN model architecture cells to notebook")

if __name__ == "__main__":
    add_rnn_model_cells()