#!/usr/bin/env python3
"""
Create comprehensive Sequence Models NLP notebook with Australian context
"""

import json

def create_sequence_models_notebook():
    """Create comprehensive sequence models notebook for Australian NLP tasks."""
    
    # Notebook metadata
    notebook = {
        "cells": [],
        "metadata": {
            "kernelspec": {
                "display_name": "Python 3",
                "language": "python",
                "name": "python3"
            },
            "language_info": {
                "codemirror_mode": {
                    "name": "ipython",
                    "version": 3
                },
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.12.3"
            }
        },
        "nbformat": 4,
        "nbformat_minor": 4
    }
    
    # Cell 1: Title and Introduction
    notebook["cells"].append({
        "cell_type": "markdown",
        "metadata": {},
        "source": [
            "# Sequence Models and Long Short-Term Memory Networks üá¶üá∫\n",
            "\n",
            "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/vuhung16au/pytorch-mastery/blob/main/examples/pytorch-nlp/sequence_models_nlp.ipynb)\n",
            "[![View on GitHub](https://img.shields.io/badge/View_on-GitHub-blue?logo=github)](https://github.com/vuhung16au/pytorch-mastery/blob/main/examples/pytorch-nlp/sequence_models_nlp.ipynb)\n",
            "\n",
            "Master sequence modeling for NLP using PyTorch with RNN, LSTM, and GRU architectures. Features comprehensive Australian tourism examples with English-Vietnamese multilingual support for advanced sequence processing tasks.\n",
            "\n",
            "## Learning Objectives\n",
            "\n",
            "By the end of this notebook, you will:\n",
            "\n",
            "- üîÑ **Master RNN architectures** including vanilla RNN, LSTM, and GRU\n",
            "- üá¶üá∫ **Build sequence models** for Australian tourism NLP tasks\n",
            "- üè∑Ô∏è **Implement POS tagging** for Australian English and Vietnamese text\n",
            "- üìä **Create sentiment analysis** with sequential processing\n",
            "- üéØ **Apply attention mechanisms** for better sequence understanding\n",
            "- üåè **Handle multilingual sequences** with shared and separate encoders\n",
            "- üîÑ **Compare with TensorFlow** RNN implementations\n",
            "\n",
            "## What You'll Build\n",
            "\n",
            "1. **Australian POS Tagger** - Tag parts of speech in tourism reviews\n",
            "2. **Multilingual Sentiment Analyzer** - Process English and Vietnamese sequences  \n",
            "3. **Tourism Review Classifier** - Categorize reviews by Australian destinations\n",
            "4. **Attention-based Sequence Model** - Focus on important parts of tourism text\n",
            "5. **Sequence-to-Sequence Translator** - Basic English-Vietnamese translation\n",
            "\n",
            "---"
        ]
    })
    
    # Cell 2: Environment Setup
    notebook["cells"].append({
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "# Environment Detection and Setup\n",
            "import sys\n",
            "import subprocess\n",
            "import os\n",
            "import time\n",
            "\n",
            "# Detect the runtime environment\n",
            "IS_COLAB = \"google.colab\" in sys.modules\n",
            "IS_KAGGLE = \"kaggle_secrets\" in sys.modules or \"kaggle\" in os.environ.get('KAGGLE_URL_BASE', '')\n",
            "IS_LOCAL = not (IS_COLAB or IS_KAGGLE)\n",
            "\n",
            "print(f\"üîç Environment Detection:\")\n",
            "print(f\"   Local Development: {IS_LOCAL}\")\n",
            "print(f\"   Google Colab: {IS_COLAB}\")\n",
            "print(f\"   Kaggle Notebooks: {IS_KAGGLE}\")\n",
            "\n",
            "# Platform-specific system setup\n",
            "if IS_COLAB:\n",
            "    print(\"\\n‚öôÔ∏è  Setting up Google Colab environment...\")\n",
            "    !apt update -qq\n",
            "    !apt install -y -qq software-properties-common\n",
            "elif IS_KAGGLE:\n",
            "    print(\"\\n‚öôÔ∏è  Setting up Kaggle environment...\")\n",
            "else:\n",
            "    print(\"\\n‚öôÔ∏è  Setting up local environment...\")"
        ]
    })
    
    # Cell 3: Package Installation
    notebook["cells"].append({
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "# Install required packages for sequence modeling\n",
            "required_packages = [\n",
            "    \"torch\",\n",
            "    \"transformers\",\n",
            "    \"datasets\", \n",
            "    \"tokenizers\",\n",
            "    \"pandas\",\n",
            "    \"seaborn\",\n",
            "    \"matplotlib\",\n",
            "    \"scikit-learn\",\n",
            "    \"tensorboard\",\n",
            "    \"nltk\",  # For POS tagging examples\n",
            "    \"plotly\",  # For sequence visualizations\n",
            "]\n",
            "\n",
            "print(\"üì¶ Installing packages for sequence modeling...\")\n",
            "for package in required_packages:\n",
            "    if IS_COLAB or IS_KAGGLE:\n",
            "        !pip install -q {package}\n",
            "    else:\n",
            "        try:\n",
            "            subprocess.run([sys.executable, \"-m\", \"pip\", \"install\", \"-q\", package], \n",
            "                          capture_output=True, check=True)\n",
            "        except subprocess.CalledProcessError:\n",
            "            print(f\"   ‚ö†Ô∏è  {package} installation skipped (likely already installed)\")\n",
            "            continue\n",
            "    print(f\"   ‚úÖ {package}\")\n",
            "\n",
            "print(\"\\nüéâ Package installation completed!\")"
        ]
    })
    
    # Cell 4: Import Libraries
    notebook["cells"].append({
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "# Import essential libraries for sequence modeling\n",
            "import torch\n",
            "import torch.nn as nn\n",
            "import torch.optim as optim\n",
            "import torch.nn.functional as F\n",
            "from torch.utils.data import Dataset, DataLoader, random_split\n",
            "from torch.nn.utils.rnn import pad_sequence, pack_padded_sequence, pad_packed_sequence\n",
            "from torch.utils.tensorboard import SummaryWriter\n",
            "\n",
            "# Data handling and visualization\n",
            "import numpy as np\n",
            "import pandas as pd\n",
            "import seaborn as sns\n",
            "import matplotlib.pyplot as plt\n",
            "import plotly.express as px\n",
            "import plotly.graph_objects as go\n",
            "from plotly.subplots import make_subplots\n",
            "\n",
            "# Machine learning and evaluation\n",
            "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
            "from sklearn.preprocessing import LabelEncoder\n",
            "from sklearn.model_selection import train_test_split\n",
            "\n",
            "# Text processing\n",
            "import re\n",
            "import string\n",
            "from collections import Counter, defaultdict\n",
            "import random\n",
            "from itertools import zip_longest\n",
            "\n",
            "# NLTK for linguistic features\n",
            "try:\n",
            "    import nltk\n",
            "    # Download required NLTK data\n",
            "    nltk.download('punkt', quiet=True)\n",
            "    nltk.download('averaged_perceptron_tagger', quiet=True)\n",
            "    nltk.download('universal_tagset', quiet=True)\n",
            "    from nltk.tokenize import word_tokenize\n",
            "    from nltk.tag import pos_tag\n",
            "    print(\"‚úÖ NLTK imported successfully\")\n",
            "except ImportError:\n",
            "    print(\"‚ö†Ô∏è  NLTK not available - will use basic tokenization\")\n",
            "\n",
            "# Set style for better notebook aesthetics\n",
            "sns.set_style(\"whitegrid\")\n",
            "sns.set_palette(\"Set2\")\n",
            "plt.rcParams['figure.figsize'] = (14, 8)\n",
            "\n",
            "# Set random seeds for reproducibility\n",
            "torch.manual_seed(42)\n",
            "np.random.seed(42)\n",
            "random.seed(42)\n",
            "\n",
            "print(f\"üîÑ Sequence Modeling Environment Ready!\")\n",
            "print(f\"   PyTorch version: {torch.__version__}\")\n",
            "print(f\"   Libraries loaded for RNN, LSTM, GRU modeling\")"
        ]
    })
    
    # Cell 5: Device Detection
    notebook["cells"].append({
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "import platform\n",
            "\n",
            "def detect_device():\n",
            "    \"\"\"Detect optimal device for sequence model training.\"\"\"\n",
            "    if torch.cuda.is_available():\n",
            "        device = torch.device(\"cuda\")\n",
            "        gpu_name = torch.cuda.get_device_name(0)\n",
            "        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3\n",
            "        \n",
            "        print(f\"üöÄ CUDA GPU detected: {gpu_name}\")\n",
            "        print(f\"   GPU Memory: {gpu_memory:.1f} GB\")\n",
            "        print(f\"   Excellent for LSTM/GRU sequence training\")\n",
            "        \n",
            "        return device\n",
            "    \n",
            "    elif hasattr(torch.backends, 'mps') and torch.backends.mps.is_available():\n",
            "        device = torch.device(\"mps\")\n",
            "        system_info = platform.uname()\n",
            "        \n",
            "        print(f\"üçé Apple Silicon MPS detected: {system_info.machine}\")\n",
            "        print(f\"   Optimized for M1/M2/M3 chips\")\n",
            "        print(f\"   Good performance for sequence models\")\n",
            "        \n",
            "        return device\n",
            "    \n",
            "    else:\n",
            "        device = torch.device(\"cpu\")\n",
            "        cpu_count = torch.get_num_threads()\n",
            "        \n",
            "        print(f\"üíª CPU mode: {platform.processor()}\")\n",
            "        print(f\"   Threads: {cpu_count}\")\n",
            "        print(f\"   üí° Tip: Use smaller hidden dimensions and shorter sequences\")\n",
            "        \n",
            "        return device\n",
            "\n",
            "# Detect and set device\n",
            "DEVICE = detect_device()\n",
            "print(f\"\\n‚úÖ Device selected: {DEVICE}\")\n",
            "\n",
            "# Set device-specific parameters\n",
            "if DEVICE.type == 'cuda':\n",
            "    BATCH_SIZE = 64\n",
            "    HIDDEN_DIM = 256\n",
            "    MAX_SEQ_LENGTH = 100\n",
            "elif DEVICE.type == 'mps':\n",
            "    BATCH_SIZE = 32\n",
            "    HIDDEN_DIM = 128  \n",
            "    MAX_SEQ_LENGTH = 80\n",
            "else:  # CPU\n",
            "    BATCH_SIZE = 16\n",
            "    HIDDEN_DIM = 64\n",
            "    MAX_SEQ_LENGTH = 50\n",
            "\n",
            "print(f\"\\n‚öôÔ∏è  Device-optimized parameters:\")\n",
            "print(f\"   Batch size: {BATCH_SIZE}\")\n",
            "print(f\"   Hidden dimension: {HIDDEN_DIM}\")\n",
            "print(f\"   Max sequence length: {MAX_SEQ_LENGTH}\")"
        ]
    })
    
    # Cell 6: Australian Tourism Sequence Dataset Creation
    notebook["cells"].append({
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "def create_australian_sequence_datasets():\n",
            "    \"\"\"\n",
            "    Create comprehensive datasets for sequence modeling tasks with Australian context.\n",
            "    \n",
            "    Returns:\n",
            "        dict: Contains datasets for different sequence modeling tasks\n",
            "    \"\"\"\n",
            "    \n",
            "    # 1. Part-of-Speech Tagging Dataset\n",
            "    pos_sentences = [\n",
            "        # English sentences with Australian context\n",
            "        \"The Sydney Opera House attracts millions of tourists annually.\",\n",
            "        \"Melbourne's coffee culture is world-renowned and deeply appreciated.\",\n",
            "        \"Brisbane's subtropical climate makes it perfect for outdoor activities.\",\n",
            "        \"Perth beaches offer excellent surfing conditions year-round.\",\n",
            "        \"Adelaide wine regions produce exceptional shiraz and cabernet varieties.\",\n",
            "        \"Darwin's tropical location provides access to unique wildlife experiences.\",\n",
            "        \"Hobart's MONA museum showcases provocative contemporary art installations.\",\n",
            "        \"Canberra houses Australia's most important national cultural institutions.\",\n",
            "        \"The Great Barrier Reef supports incredible marine biodiversity.\",\n",
            "        \"Uluru holds deep spiritual significance for Aboriginal communities.\",\n",
            "        \"Kakadu National Park preserves ancient rock art galleries.\",\n",
            "        \"Blue Mountains scenic railways provide spectacular valley views.\",\n",
            "        \"Gold Coast theme parks offer thrilling rides and entertainment.\",\n",
            "        \"Tasmania's wilderness areas protect unique endemic species.\",\n",
            "        \"Alice Springs serves as the heart of Australia's red centre.\",\n",
            "        \n",
            "        # Vietnamese sentences\n",
            "        \"Nh√† h√°t Opera Sydney thu h√∫t h√†ng tri·ªáu du kh√°ch m·ªói nƒÉm.\",\n",
            "        \"VƒÉn h√≥a c√† ph√™ Melbourne ƒë∆∞·ª£c bi·∫øt ƒë·∫øn tr√™n to√†n th·∫ø gi·ªõi.\",\n",
            "        \"Kh√≠ h·∫≠u c·∫≠n nhi·ªát ƒë·ªõi Brisbane ho√†n h·∫£o cho ho·∫°t ƒë·ªông ngo√†i tr·ªùi.\",\n",
            "        \"B√£i bi·ªÉn Perth cung c·∫•p ƒëi·ªÅu ki·ªán l∆∞·ªõt s√≥ng tuy·ªát v·ªùi.\",\n",
            "        \"V√πng r∆∞·ª£u vang Adelaide s·∫£n xu·∫•t shiraz v√† cabernet ƒë·∫∑c bi·ªát.\"\n",
            "    ]\n",
            "    \n",
            "    # 2. Sentiment Analysis Dataset\n",
            "    sentiment_data = {\n",
            "        'texts': [\n",
            "            # Positive sentiment\n",
            "            \"Sydney Harbour Bridge climb was absolutely incredible and breathtaking!\",\n",
            "            \"Melbourne's laneways are filled with amazing street art and culture.\",\n",
            "            \"The Great Barrier Reef snorkeling exceeded all my expectations completely.\",\n",
            "            \"Uluru sunset viewing was a deeply spiritual and moving experience.\",\n",
            "            \"Perth's Rottnest Island quokkas are adorable and photogenic creatures.\",\n",
            "            \"Adelaide Central Market offers the freshest local produce available.\",\n",
            "            \"Tasmania's Cradle Mountain hiking trails are absolutely spectacular.\",\n",
            "            \"Darwin's mindfulness markets showcase incredible local indigenous art.\",\n",
            "            \"Canberra's national galleries house world-class art collections.\",\n",
            "            \"Brisbane's South Bank offers excellent riverside dining experiences.\",\n",
            "            \n",
            "            # Vietnamese positive\n",
            "            \"Leo c·∫ßu C·∫£ng Sydney th·∫≠t tuy·ªát v·ªùi v√† ngo·∫°n m·ª•c!\",\n",
            "            \"C√°c con h·∫ªm Melbourne ƒë·∫ßy ngh·ªá thu·∫≠t ƒë∆∞·ªùng ph·ªë tuy·ªát v·ªùi.\",\n",
            "            \"L·∫∑n ng·∫Øm Great Barrier Reef v∆∞·ª£t xa mong ƒë·ª£i c·ªßa t√¥i.\",\n",
            "            \"Ng·∫Øm ho√†ng h√¥n Uluru l√† tr·∫£i nghi·ªám t√¢m linh s√¢u s·∫Øc.\",\n",
            "            \"Quokka ·ªü ƒë·∫£o Rottnest Perth th·∫≠t ƒë√°ng y√™u v√† d·ªÖ ch·ª•p ·∫£nh.\",\n",
            "            \n",
            "            # Neutral sentiment  \n",
            "            \"Sydney accommodation prices vary significantly depending on location and season.\",\n",
            "            \"Melbourne weather can be unpredictable with four seasons in one day.\",\n",
            "            \"Brisbane has reasonable public transport connections to major attractions.\",\n",
            "            \"Perth is quite isolated but offers decent shopping and dining options.\",\n",
            "            \"Adelaide is smaller than other capitals but has its own unique character.\",\n",
            "            \"Darwin has limited attractions but interesting weekend markets available.\",\n",
            "            \"Hobart offers a mix of historical and contemporary cultural experiences.\",\n",
            "            \"Canberra is primarily known for its governmental and cultural institutions.\",\n",
            "            \n",
            "            # Vietnamese neutral\n",
            "            \"Gi√° ch·ªó ·ªü Sydney thay ƒë·ªïi t√πy theo v·ªã tr√≠ v√† m√πa.\",\n",
            "            \"Th·ªùi ti·∫øt Melbourne c√≥ th·ªÉ kh√≥ ƒëo√°n v·ªõi b·ªën m√πa trong m·ªôt ng√†y.\",\n",
            "            \n",
            "            # Negative sentiment\n",
            "            \"Sydney traffic congestion makes getting around extremely frustrating and time-consuming.\",\n",
            "            \"Melbourne's unpredictable weather ruined our carefully planned outdoor activities.\",\n",
            "            \"Brisbane humidity during summer is absolutely unbearable and oppressive.\",\n",
            "            \"Perth nightlife is disappointingly limited and closes way too early.\",\n",
            "            \"Adelaide becomes very quiet after 6 PM with limited entertainment options.\",\n",
            "            \"Darwin is extremely expensive for basic necessities and everyday groceries.\",\n",
            "            \"Hobart's winter weather is depressingly cold and wet for tourists.\",\n",
            "            \"Canberra can feel somewhat sterile and lacking in vibrant culture.\",\n",
            "            \n",
            "            # Vietnamese negative\n",
            "            \"T·∫Øc ƒë∆∞·ªùng Sydney l√†m di chuy·ªÉn c·ª±c k·ª≥ kh√≥ ch·ªãu v√† t·ªën th·ªùi gian.\",\n",
            "            \"Th·ªùi ti·∫øt Melbourne kh√¥ng th·ªÉ ƒëo√°n tr∆∞·ªõc l√†m h·ªèng ho·∫°t ƒë·ªông ngo√†i tr·ªùi.\",\n",
            "            \"ƒê·ªô ·∫©m Brisbane m√πa h√® th·∫≠t kh√¥ng th·ªÉ ch·ªãu n·ªïi.\",\n",
            "            \"Cu·ªôc s·ªëng v·ªÅ ƒë√™m Perth th·∫•t v·ªçng v√† ƒë√≥ng c·ª≠a qu√° s·ªõm.\",\n",
            "            \"Darwin c·ª±c k·ª≥ ƒë·∫Øt ƒë·ªè cho nhu c·∫ßu c∆° b·∫£n v√† th·ª±c ph·∫©m.\"\n",
            "        ],\n",
            "        'labels': (\n",
            "            [2] * 15 +  # Positive (English + Vietnamese)\n",
            "            [1] * 10 +  # Neutral (English + Vietnamese)\n",
            "            [0] * 13    # Negative (English + Vietnamese)\n",
            "        )\n",
            "    }\n",
            "    \n",
            "    # 3. Destination Classification Dataset\n",
            "    destination_data = {\n",
            "        'texts': [\n",
            "            # Sydney\n",
            "            \"The iconic Opera House and Harbour Bridge dominate the skyline beautifully.\",\n",
            "            \"Bondi Beach offers excellent surfing and vibrant beach culture year-round.\",\n",
            "            \"The Rocks historic area preserves colonial heritage and weekend markets.\",\n",
            "            \"Darling Harbour features world-class museums and entertainment venues.\",\n",
            "            \n",
            "            # Melbourne  \n",
            "            \"Street art in hidden laneways creates an urban cultural playground.\",\n",
            "            \"Coffee culture here is taken seriously with expert baristas everywhere.\",\n",
            "            \"Tram networks provide convenient access to all major city attractions.\",\n",
            "            \"Federation Square hosts cultural events and major gallery exhibitions.\",\n",
            "            \n",
            "            # Brisbane\n",
            "            \"South Bank parklands offer riverside dining and cultural institutions.\",\n",
            "            \"Subtropical climate makes outdoor activities enjoyable year-round.\",\n",
            "            \"Story Bridge climbing provides panoramic city and river views.\",\n",
            "            \"Queen Street Mall is the heart of the shopping district.\",\n",
            "            \n",
            "            # Perth\n",
            "            \"Pristine beaches stretch along the coast with crystal clear waters.\",\n",
            "            \"Kings Park offers botanical gardens and city skyline views.\",\n",
            "            \"Fremantle port city features maritime heritage and weekend markets.\",\n",
            "            \"Swan Valley wine region produces excellent local varieties.\",\n",
            "            \n",
            "            # Adelaide\n",
            "            \"Festival city hosts numerous cultural celebrations throughout the year.\",\n",
            "            \"Central Market offers the finest local and international produce.\",\n",
            "            \"Adelaide Hills wine country produces cool climate varieties.\",\n",
            "            \"Parklands surrounding the city provide green recreational spaces.\",\n",
            "            \n",
            "            # Other destinations\n",
            "            \"Tropical climate and relaxed atmosphere define the northern lifestyle.\",  # Darwin\n",
            "            \"MONA museum challenges visitors with provocative contemporary art.\",      # Hobart\n",
            "            \"National institutions and planned city layout characterize the capital.\", # Canberra\n",
            "            \"Red centre heart of Australia with outback wilderness experiences.\"      # Alice Springs\n",
            "        ],\n",
            "        'labels': (\n",
            "            [0] * 4 +  # Sydney\n",
            "            [1] * 4 +  # Melbourne\n",
            "            [2] * 4 +  # Brisbane  \n",
            "            [3] * 4 +  # Perth\n",
            "            [4] * 4 +  # Adelaide\n",
            "            [5, 6, 7, 8]  # Darwin, Hobart, Canberra, Alice Springs\n",
            "        )\n",
            "    }\n",
            "    \n",
            "    return {\n",
            "        'pos_tagging': pos_sentences,\n",
            "        'sentiment_analysis': sentiment_data,\n",
            "        'destination_classification': destination_data\n",
            "    }\n",
            "\n",
            "# Create datasets\n",
            "datasets = create_australian_sequence_datasets()\n",
            "\n",
            "print(\"üá¶üá∫ Australian Tourism Sequence Datasets Created\")\n",
            "print(\"=\" * 55)\n",
            "print(f\"   POS Tagging sentences: {len(datasets['pos_tagging'])}\")\n",
            "print(f\"   Sentiment analysis texts: {len(datasets['sentiment_analysis']['texts'])}\")\n",
            "print(f\"   Destination classification texts: {len(datasets['destination_classification']['texts'])}\")\n",
            "\n",
            "# Analyze sentiment distribution\n",
            "sentiment_counts = Counter(datasets['sentiment_analysis']['labels'])\n",
            "sentiment_labels = ['Negative', 'Neutral', 'Positive']\n",
            "print(f\"\\nüìä Sentiment Distribution:\")\n",
            "for label, count in sentiment_counts.items():\n",
            "    print(f\"   {sentiment_labels[label]}: {count} examples\")\n",
            "\n",
            "# Analyze destination distribution\n",
            "destination_counts = Counter(datasets['destination_classification']['labels'])\n",
            "destination_labels = ['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide', 'Darwin', 'Hobart', 'Canberra', 'Alice Springs']\n",
            "print(f\"\\nüèôÔ∏è  Destination Distribution:\")\n",
            "for label, count in destination_counts.items():\n",
            "    if label < len(destination_labels):\n",
            "        print(f\"   {destination_labels[label]}: {count} examples\")\n",
            "\n",
            "# Show sample data\n",
            "print(f\"\\nüìù Sample POS sentence:\")\n",
            "print(f\"   {datasets['pos_tagging'][0]}\")\n",
            "\n",
            "print(f\"\\nüòä Sample sentiment text (positive):\")\n",
            "pos_idx = datasets['sentiment_analysis']['labels'].index(2)\n",
            "print(f\"   {datasets['sentiment_analysis']['texts'][pos_idx]}\")\n",
            "\n",
            "print(f\"\\nüè¢ Sample destination text (Sydney):\")\n",
            "sydney_idx = datasets['destination_classification']['labels'].index(0)\n",
            "print(f\"   {datasets['destination_classification']['texts'][sydney_idx]}\")\n",
            "\n",
            "print(f\"\\n‚úÖ Sequence datasets ready for model training!\")"
        ]
    })
    
    # Save the initial notebook
    with open("sequence_models_nlp.ipynb", "w") as f:
        json.dump(notebook, f, indent=2)
    
    return notebook

if __name__ == "__main__":
    notebook = create_sequence_models_notebook()
    print("‚úÖ Sequence Models notebook foundation created successfully!")